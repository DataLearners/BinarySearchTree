# -*- coding: utf-8 -*-
"""
Split dataset into training set and test set
70% training and 30% test
Key attributes of Tree are leaf_matrix, marked_data, tree_array, predict()
"""
import random, matplotlib.pyplot as plt, numpy as np
import startup, prep, bst
import prep.ingest as ingest

random.seed(10)
datapath = 'data_science_poc\\Diabetes_DecisionTree\\Dataset'
datafolder = startup.find_subroot(datapath)
startup.make_folder('Output')
outputpath = startup.find_subroot('Diabetes_DecisionTree\\Output')
files = ingest.Folder(datafolder)
files()
 
yes_no = lambda x: {1:'Yes', 0:'No'}[x]
df = files.toListDF(fileindex=0)
col = [yes_no(random.randint(0, 1)) for i in range(df.num_rows)]
df.add_col(col, 'HeartAttack')
df.transform_col(yes_no, 'Outcome')

x = [[18, [0.9735601829566694, 0.9165166037020354]],
 [8, [0.2578865348020216, 0.5916634147737261]],
 [17, [0.9813403059229551, 0.7993236286762152]],
 [9, [0.3363136774138572, 0.6466313457921833]],
 [7, [0.34888860618068684, 0.4303894855770901]],
 [7, [0.0780812318948586, 0.706398103271117]],
 [9, [0.5909843318603314, 0.3873683275821238]],
 [7, [0.6496625892641166, 0.1377471828374891]],
 [10, [0.3757646500676536, 0.7235255741706963]],
 [13, [0.7916860547574551, 0.6014621637762834]],
 [9, [0.9280437774672406, 0.04601843653286153]],
 [12, [0.7967642874695443, 0.4388160429024488]],
 [13, [0.6687356142074962, 0.6985230872833166]],
 [3, [0.03169779114702709, 0.2872894142827811]],
 [15, [0.9906106595060454, 0.5696482744179594]],
 [11, [0.6411957483346735, 0.5439814148230241]],
 [3, [0.10893093609955173, 0.26908481106157844]],
 [13, [0.8808594148821987, 0.4223694233068064]],
 [9, [0.15884180927316127, 0.8288060284428209]],
 [5, [0.11152673148589409, 0.44879986257465854]],
 [15, [0.6412058789382808, 0.86469613731349]],
 [11, [0.5254158207306306, 0.6047899102659395]],
 [3, [0.08172866238804244, 0.2852712861402551]],
 [7, [0.02354325483165065, 0.7547729506903966]],
 [6, [0.628632118350185, 0.054059236791409226]],
 [19, [0.9646440128857374, 0.9616022470217859]],
 [4, [0.2457807359943892, 0.2445120816472628]],
 [9, [0.32934782295223164, 0.6563280054574001]],
 [9, [0.11978560790669579, 0.8320368133789169]],
 [1, [0.0780734406724568, 0.0373953662927935]],
 [10, [0.3689756113829016, 0.6762517464909565]],
 [14, [0.8913421490617465, 0.5589870547398541]],
 [10, [0.26899113162353094, 0.7435438616886256]],
 [13, [0.994851582244994, 0.37191722201849975]],
 [9, [0.8168680631267433, 0.14596534938605432]],
 [4, [0.447830946525516, 0.00479081163432582]],
 [0, [0.07672682395226471, 0.00066995072864795]],
 [16, [0.8278434654440409, 0.832464629660278]],
 [10, [0.43852297938490314, 0.5956183427761325]],
 [4, [0.4618479397092321, 0.010259175824756328]],
 [13, [0.6715338634485112, 0.6748130371900958]],
 [4, [0.358927139503078, 0.13986175075007345]],
 [10, [0.1747872654602508, 0.8894638805841824]],
 [12, [0.3171903318870307, 0.9715989187506175]],
 [5, [0.46516993108074467, 0.125536368978324]],
 [6, [0.1400988642355565, 0.5371704579427447]],
 [4, [0.3778858648511628, 0.07602749327300218]],
 [11, [0.5481825949593222, 0.6512927712405754]],
 [10, [0.1803870493486912, 0.910331668731001]],
 [4, [0.1366623010065825, 0.2834696901633399]],
 [7, [0.16128394301569282, 0.5474605409513166]],
 [3, [0.04245512647057503, 0.3523000633219885]],
 [1, [0.08923619174376629, 0.03255363244054643]],
 [5, [0.49367653283375323, 0.03631920808837141]],
 [16, [0.7156344391104505, 0.8883699282448944]],
 [18, [0.8706201648726947, 0.9893667293179057]],
 [18, [0.9808832539699238, 0.833802082629026]],
 [10, [0.3971947664668539, 0.6293392651648795]],
 [5, [0.5194304890760179, 0.07353790326702114]],
 [14, [0.4212807297233694, 0.9792193052294818]],
 [11, [0.6664707092423467, 0.44931516735660226]],
 [4, [0.34493116771599974, 0.11679946155070964]],
 [7, [0.0671278827631192, 0.7020678254594005]],
 [16, [0.9325230662576959, 0.6859392558694877]],
 [15, [0.849410549135877, 0.6878274612611399]],
 [18, [0.9934117513469751, 0.8253858862096481]],
 [17, [0.9790876382171015, 0.8121257358804228]],
 [7, [0.3486294009354902, 0.4218583594198231]],
 [6, [0.5292346672523467, 0.15174096316598984]],
 [15, [0.8779397129227916, 0.6813369987680824]],
 [6, [0.5460010847253467, 0.1087060803965274]],
 [10, [0.5825976796664759, 0.4287701912858942]],
 [9, [0.8237467920163554, 0.09558012528827131]],
 [8, [0.3563670244857904, 0.4559060407433534]],
 [9, [0.45209537452885695, 0.5275337160520717]],
 [10, [0.4739731194241287, 0.5356488704482869]],
 [10, [0.781046855194077, 0.30254310715286725]],
 [12, [0.6518787538168057, 0.6240294752095387]],
 [18, [0.9757578014585114, 0.869380523579337]],
 [14, [0.8527947469868687, 0.6203973893218311]],
 [7, [0.6606813806411611, 0.049235696623974756]],
 [13, [0.6247149489264362, 0.7654339284757942]],
 [17, [0.883159589667951, 0.8587904763151035]],
 [10, [0.40350530285359754, 0.690491473090073]],
 [8, [0.3472166473259478, 0.47834690123136214]],
 [15, [0.7862022194422428, 0.7537657373212268]],
 [6, [0.6216622091615415, 0.022731828090720607]],
 [16, [0.7874479993088345, 0.8993758965720513]],
 [16, [0.6957001127634534, 0.9346347906012566]],
 [11, [0.3434203018795946, 0.8417531380862632]],
 [10, [0.6239895786736973, 0.42170670439979796]],
 [8, [0.2619568248574049, 0.6217163411542831]],
 [10, [0.6524080584405129, 0.3876088595992606]],
 [7, [0.571672226879387, 0.17595329669267878]],
 [12, [0.7328056389291558, 0.5039349895252375]],
 [11, [0.8722187279867187, 0.30630084509728395]],
 [16, [0.8903326463357591, 0.7998028750906714]],
 [14, [0.8094431479355274, 0.6492814356470746]],
 [9, [0.13277036188479785, 0.8665148999002201]],
 [8, [0.6536692656026438, 0.17763925431225425]]]

xx = []
for row in x:
    xx.append(list(prep.flatten(row)))
dataset = prep.ingest.ListDF(xx, ['Y', 'X1', 'X2'])

train_data, test_data = prep.split_train_test(dataset.data, tst_prop=0.3)

y = dataset.header.index('Y')
ray_tree = bst.Tree(train_data, y, dataset.header, loss='var')
ray_pred = ray_tree.predict(test_data)
leaf = random.sample(ray_tree.leaves, 1)[0]
ray_tree.traverse_to(leaf)
ray_tree.leaf_matrix.export("Diabetes_LeafMatrix.csv", folder=outputpath)
ray_tree.tree_array.export("Diabetes_Tree.csv", folder=outputpath)
filename= "Diabetes_MarkedTrainingData.csv"
ray_tree.marked_data.export(filename, folder=outputpath)
#
#y = df.header.index('BMI')
#bmi_tree = bst.Tree(train_data, y, df.header, loss='var', min_rows=15)
#filename = "BMI_Predictions.csv"
#bmi_tree.predict(test_data, conf=0.8).export(filename, folder=outputpath)
#leaf = random.sample(bmi_tree.leaves, 1)[0]
#bmi_tree.traverse_to(leaf)
#bmi_tree.leaf_matrix.export("BMI_LeafMatrix.csv", folder=outputpath)
#bmi_tree.tree_array.export("BMI_Tree.csv", folder=outputpath)
#bmi_tree.marked_data.export("BMI_MarkedTrainingData.csv", folder=outputpath)
#
#rows = 0
#horiz, mse, rsq, ftrs = [], [], [], []
#y = df.header.index('BMI')
#for i in range(5):
#    horiz.append(rows)
#    rows += 5
#    bmi_tree = bst.Tree(train_data, y, df.header, loss='var', min_rows=rows)
#    print("Min Rows {}".format(rows))
#    pred = bmi_tree.predict(test_data, conf=0.9)
#    mse.append(bmi_tree.mse)
#    rsq.append(bmi_tree.r_sq)
#    ftrs.append(len(bmi_tree.feature_importance))
#  
#plt.figure(figsize=(18, 6))
#plt.subplot(1,3,1)    
#x = np.asarray(horiz)
#plt.plot(x, np.asarray(mse))
#plt.axvline(x=50, ls=':')
#plt.ylabel('MSE')
#plt.xlabel('Minimum Node Size')
#plt.subplot(1,3,2)    
#x = np.asarray(horiz)
#plt.plot(x, np.asarray(rsq))
#plt.axvline(x=50, ls=':')
#plt.ylabel('RSquare')
#plt.xlabel('Minimum Node Size')
#plt.subplot(1,3,3)    
#x = np.asarray(horiz)
#plt.plot(x, np.asarray(ftrs))
#plt.axvline(x=50, ls=':')
#plt.ylabel('Features')
#plt.xlabel('Minimum Node Size')
#plt.savefig('Output\\AccuracyPlots.png')
#plt.show()
#
#bst.config.TIMES.plot_times()

